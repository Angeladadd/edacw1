- name: Make tmp directory
  ansible.builtin.file:
    path: /home/almalinux/data/tmp
    state: directory
    mode: '0755'

- name: Download data models
  ansible.builtin.get_url:
    dest: "{{ data_tar_dir }}"
    tmp_dest: /home/almalinux/data/tmp
    url: "{{ data_url }}"
    timeout: 600
    validate_certs: no
  register: download_result
  until: download_result is succeeded
  retries: 3
  delay: 10

- name: Check if Model is already extracted
  ansible.builtin.stat:
    path: "{{ data_dir }}"
  register: folder_check

- name: Make data directory
  ansible.builtin.file:
    path: "{{ data_dir }}"
    state: directory
    mode: '0777'
  when: not folder_check.stat.exists

- name: Unpack models archive
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ data_tar_dir }}"
    dest: "{{ data_dir }}"
  when: not folder_check.stat.exists

- name: Remove archive
  ansible.builtin.file:
    path: "{{ data_tar_dir }}"
    state: absent
  when: not folder_check.stat.exists

- name: Remove non-.pdb files in a directory
  shell: 'find {{ data_dir }} -type f ! -name "*.pdb.gz" -delete'

- name: Unzip all remaining gzipped files (PDB files)
  shell: 'find {{ data_dir }} -name "*.gz" -exec gunzip {} +'

- name: Check if MinIO alias is configured
  shell: "/usr/local/bin/mc alias list | grep -qw {{ minio_alias }}"
  register: alias_check
  failed_when: false
  changed_when: false

- name: Ensure MinIO alias is configured
  shell: "/usr/local/bin/mc alias set {{ minio_alias }} {{ s3_url }} {{ minio_access_key }} {{ minio_secret_key }}"
  when: alias_check.rc != 0 
  register: alias_set_result
  changed_when: alias_check.rc != 0

- name: Sleep for 5 seconds
  pause:
    seconds: 5
  when: alias_set_result.changed

- name: Create MinIO bucket if it does not exist
  shell: "/usr/local/bin/mc mb --ignore-existing myminio/{{ item }}"
  with_items:
    - "{{ input_bucket }}"
    - "{{ output_bucket }}"
    - cath-summary
  register: bucket_create_result
  until: bucket_create_result is succeeded
  retries: 3
  delay: 10

- name: Set up MinIO bucket download policy
  shell: "/usr/local/bin/mc anonymous set download myminio/{{ item }}"
  with_items:
    - "{{ output_bucket }}"
    - cath-summary
  register: download_policy_result
  until: download_policy_result is succeeded
  retries: 3
  delay: 10

- name: Upload all files to MinIO bucket
  shell: "/usr/local/bin/mc cp --recursive {{ data_dir }}/ {{ minio_alias }}/{{ input_bucket }}"
  register: upload_result
  until: upload_result is succeeded
  retries: 3
  delay: 10
